#!/bin/sh

/bin/mount -a

# Check for corrupted /etc/udev.tar files
UDEV_TAR_LEN=`ls -l /etc/dev.tar | /usr/bin/awk '{ print $5}'`
if [ "x0" == "x$UDEV_TAR_LEN" ]; then
	/bin/rm /etc/dev.tar
fi

# Create /dev using udev
/etc/init.d/udev start

echo "Mounting RAM Disk"
/bin/mount -t ramfs ramfs /tmp
/bin/mount -t ramfs ramfs /var
mkdir /var/shm /var/log /var/run

# Set hostname
if [ -f /etc/hostname ]; then
	/bin/hostname -F /etc/hostname
fi

# Start syslogd
#First search to see if there are any log directories under /media/*/. If the log directory exist, then there are
#two possibilities. The log directory is part of the USB/SD that is created by the user of those devices OR the directory
#is created on the flash to keep larger log files.
#One way of keeping a longer log files is simply creating the log directory on /media manually: 
#                 #mkdir /media/mylogs
#                 #mkdir /media/mylogs/log/

#LOG_DIRS included all the potentail directoris. LOG_DIR is the one that is the top of the list
LOG_DIRS=`find /media/ -name log -mindepth 1 -maxdepth 2`
LOG_DIR=`echo $LOG_DIRS | awk '{print $1}'`

#if the LOG_DIR exists, then syslogd logs go to that directory.
if [ "$LOG_DIR" != "" ]; then
	# log and core files to media
        echo "Starting syslogd to \"$LOG_DIR\""

        #each log file will be 10MB and the maximum number of log files will be 6. The 60MB maximum size
        #should enable the logging of the events on the flash with no conrern for filling out the flash at the moment. 
        /sbin/syslogd -S -s10240 -O $LOG_DIR/messages -b 6 

	(cd /var/log; /bin/ln -sf $LOG_DIR/messages messages)

	echo "Enabling core files to \"$LOG_DIR\""
	echo "$LOG_DIR/core-%e" > /proc/sys/kernel/core_pattern
	ulimit -c unlimited
else
	# log to /var
	echo "Starting syslogd"
	/sbin/syslogd -S
fi

# Start kernel logger
/sbin/klogd

# Start watchdog
/usr/sbin/watchdog

# Check booloader version
if [ -x /etc/init.d/blupdate ]; then
	/etc/init.d/blupdate
fi

# Execute firstboot script?
if ! [ -f /etc/firstboot ]; then
	echo "First boot"
	touch /etc/firstboot

	for patch in /media/*/squeezeos.patch; do
		echo "Applying patch: $patch"
		/usr/bin/patch -i $patch
	done

	for script in /media/*/squeezeos-post-reset.sh; do
		if [ -x $script ]; then
			echo "Executing: $script"
			$script
		fi
	done
fi

# Create ssh keys
if ! [ -f /etc/dropbear/dropbear_rsa_host_key ] ; then
	echo "Creating dropbear rsa host key"
	/usr/sbin/dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
fi

if ! [ -f /etc/dropbear/dropbear_dss_host_key ]; then
	echo "Creating dropbear dss host key"
	/usr/sbin/dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
fi

if ! [ -f /etc/dropbear/dropbear_ecdsa_host_key ]; then
	echo "Creating dropbear ecdsa host key"
	/usr/sbin/dropbearkey -t ecdsa -f /etc/dropbear/dropbear_ecdsa_host_key
fi

if ! [ -f /etc/dropbear/dropbear_ed25519_host_key ]; then
	echo "Creating dropbear ed25519 host key"
	/usr/sbin/dropbearkey -t ed25519 -f /etc/dropbear/dropbear_ed25519_host_key
fi

# Create lastlog/wtmp for remote login
if ! [ -f /var/log/lastlog ]; then
	/bin/touch /var/log/lastlog
fi

if ! [ -f /var/log/wtmp ]; then
	/bin/touch /var/log/wtmp
fi

# Start network
echo "Starting lo"
/sbin/ifconfig lo up 127.0.0.1

echo "Starting inetd"
/usr/sbin/inetd

echo "Starting crond"
/usr/sbin/crond

# Start wlan
/etc/init.d/wlan start

# Start all 'auto' interfaces
ifup -a &

# Optional local rc script
if [ -x /etc/init.d/rcS.local ]; then
	echo "Running rcS.local"
	/etc/init.d/rcS.local
fi

# Optional media scripts
for script in /media/*/squeezeos-boot.sh; do
	if [ -x $script ]; then
		echo "Executing: $script"
		$script
	fi
done

# Start Samba
if [ -x /etc/init.d/samba ]; then
	/etc/init.d/samba start &
fi

# Start squeezeplay
/etc/init.d/squeezeplay start
